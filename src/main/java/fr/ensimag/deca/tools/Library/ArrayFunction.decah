// Calcul de la trace, search, compare, addition, soustraction, multiplication, multiplication par un scalaire,
// remplissage, tri, copie

class ArrayFunction {

    void printMat(float[][] matrice) {
        int i = 0;
        int j = 0;
        print("[");
        while (i < matrice.length) {
            print("[");
            j = 0;
            while (j < matrice[0].length) {
                print(matrice[i][j] + ", ");
                j = j + 1;
            }
            print("]");
            if (i == matrice[0].length - 1) {
                print("]");
            }
            println();
            i = i + 1;
        }
    }

    float trace(float[][] matrice) {

        float trace = 0;
        int i = 0;
        while (i < matrice.length) {
            trace = trace + matrice[i][i];
            i = i + 1;
        }
        return trace;
    }

    float[][] add(float[][] A, float[][] B) {

        float[][] matrice = deepCopy(A);
        int i = 0;
        int j = 0;
        while (i < matrice.length) {
            j = 0;
            while (j < matrice[0].length) {
                matrice[i][j] = matrice[i][j] + B[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return matrice;
    }

    float[][] sub(float[][] A, float[][] B) {

        float[][] matrice = deepCopy(A);
        int i = 0;
        int j = 0;
        while (i < matrice.length) {
            j = 0;
            while (j < matrice[0].length) {
                matrice[i][j] = matrice[i][j] - B[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return matrice;
    }

    float[][] multScalar(float[][] A, int lambda) {

        float[][] matrice = deepCopy(A);
        int i = 0;
        int j = 0;
        while (i < matrice.length) {
            j = 0;
            while (j < matrice[0].length) {
                matrice[i][j] = matrice[i][j] * lambda;
                j = j + 1;
            }
            i = i + 1;
        }
        return matrice;
    }

    float[][] multMatrix(float[][] A, float[][] B) {

        float[A.length][B[0].length] matrice;
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < matrice.length) {
            j = 0;
            while (j < matrice.length) {
                k = 0;
                while (k < matrice.length) {
                    matrice[i][j] = matrice[i][j] + A[i][k] * B[k][j];
                    k = k + 1;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return matrice;
    }

    float[][] fill(float[][] matrice, float element) {
        int i = 0;
        int j = 0;
        while (i < matrice.length) {
            j = 0;
            while (j < matrice[0].length) {
                matrice[i][j] = element;
                j = j + 1;
            }
            i = i + 1;
        }
        return matrice;
    }

    Index search(float[][] matrice, float element) {
        int i = 0;
        int indexI = -1;
        int indexJ = -1;
        boolean b = false;
        int j = 0;
        Index res = new Index();
        while (i < matrice.length && !b) {
            j = 0;
            while (j < matrice[0].length && !b) {
                if (matrice[i][j] == element) {
                    b = true;
                    indexI = i;
                    indexJ = j;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        res.indexI = indexI;
        res.indexJ = indexJ;
        res.bool = b;
        return res;
    }

    int partition(float[] tab, int low, int high) {
        float pivot = tab[high];
        int index = low - 1;
        int i = low;
        float tmp;
        while (i < high) {
            if (tab[i] < pivot) {
                index = index + 1;
                tmp = tab[i];
                tab[i] = tab[index];
                tab[index] = tmp;
            }
            i = i + 1;
        }
        index = index + 1;
        tmp = tab[high];
        tab[high] = tab[index];
        tab[index] = tmp;
        return index;
    }

    float[] quicksort(float[] tab, int low, int high) {
        int part;
        if (low < high) {
            part = partition(tab, low, high);
            quicksort(tab, low, part-1);
            quicksort(tab, part + 1, high);
            return tab;
        }
        return null;
    }

    boolean compare(float[][] A, float[][] B) {
        int i = 0;
        int j = 0;
        while (i < A.length) {
            j = 0;
            while (j < A[0].length) {
                if (A[i][j] != B[i][j]) {
                    return false;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return true;
    }

    float[][] deepCopy(float[][] matrix) {
        float[matrix.length][matrix[0].length] newMatrix;
        int i = 0;
        int j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix[0].length) {
                newMatrix[i][j] = matrix[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return newMatrix;
    }


    float[][] deepCopyOfRange(float[][] matrix, int indexI, int indexJ, int indexY, int indexZ) {
        float[indexY-indexI+1][indexZ-indexJ+1] newMatrix;
        int i = indexI;
        int j = indexJ;
        while (i < indexY+1) {
            j = indexJ;
            while (j < indexZ+1) {
                newMatrix[i-indexI][j-indexJ] = matrix[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return newMatrix;
    }
}

class Index {
    protected int indexI;
    protected int indexJ;
    protected boolean bool;
}
